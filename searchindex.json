{"categories":[{"title":"学习篇","uri":"https://sleepshow.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AF%87/"}],"posts":[{"content":"本文是通过观看尚硅谷的数据结构和算法视频的笔记，如有错误地方，欢迎指正。\n代码部分使用的语言是C++\n稀疏数组 1. 使用情况： 　当一个数组中的大部分元素为 0 或者同一值时，可采用稀疏数组进行压缩。\n2. 操作方法： 　（1）先记录数组中一共有多少行、多少列和多少个不同的值；\n（2）将不同值的元素的行数、列数和值用一个小数组记录；\n（3）小数组，即稀疏数组行数随原数组的值进行变化，列数共三列，分别表示行、列、对应的值；\n（4）如果原数组共有 n 个不同的值，则小数组的行数为 n+1，因为小数组的第一行存储总的行数、列数和不同值个数，第二行开始记录每个在原数组不同值对应的行和列；\n（5）将稀疏数组保存到磁盘中；\n3. 代码部分 　- 稀疏数组实现代码\n 栈（stack） 1.特点 　（1）先入后出的有序列表\n（2）栈底固定不变，栈顶随着数据输入输出而变化\n（3）入栈图\n- （4）出栈图\n- 2.使用场景 　（1）子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。\n（2）处理递归调用：除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。\n（3）表达式的转换\n（4）二叉树的遍历\n（5）图形的深度优先搜索法（dfs）\n3. 表达式 （1）前缀表达式（波兰表达式） 　- 特点：运算符均位于操作数之前。\n- 例如：- × + 3 4 5 6\n- 求值过程：从右向左扫描表达式，遇到数字，压入数字栈，遇到运算符，弹出栈顶两个数字进行运算，将结果压入数字栈；重复操作。\n（2）中缀表达式 　- 即常见的运算表达式\n- 例如：(3+4)×5-6\n（3）后缀表达式（逆波兰表达式） 　- 特点：运算符位于操作数之后\n- 例如：3 4 + 5 × 6 –    正常表达式 逆波兰表达式     a+b a b +   a+(b-c) a b c - +   a+(b-c)*d a b c – d * +    　- 求值过程：从左至右扫描表达式，遇到数字，压入数字栈，遇到运算符，弹出栈顶的两个数字，计算结果，并将结果入栈；重复上述过程直到表达式最右端，最后运算得出的值即为表达式的结果；\n- 【逆波兰计算器】中缀表达式转后缀表达式\n 队列（queue） 1. 特点 　（1）先入先出的有序列表\n（2）可以用数组或链表实现\n（3）队列的顶端、低端下标随着数据输入、输出而变化\n- 2. 模拟队列代码 　- 环形队列功能模拟代码\n 链表 1.特点 　（1）以节点的方式进行存储，属于链式存储\n（2）每个节点含有 data 域和 next 域，next 用于指向下一个节点\n2.单链表 　（1）带头节点链表示意图\n- （2）单链表代码\n- 【面试题】查找单链表中的倒数第k个结点\n- 【面试题】单链表的反转\n3.单向环形链表 　（1）约瑟夫环问题（Josephu）\n 问题描述：\n设编号为1，2，．．．n的n个人围坐一圈，约定编号为k（1\u0026lt;=k\u0026lt;=n）的人从1开始报数，数到m 的那个人出列，它的下一位又从1开始报数，数到m的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。\n 　- - 约瑟夫环代码\n4.双向链表 　（1）不需要辅助节点就可以实现自我删除\n（2）用双向链表实现单向链表\n- 双向链表代码\n 递归 1.解决问题： 　（1）数学问题如：八皇后，汉诺塔，阶乘，迷宫，球和篮子等；\n（2）各种算法：快速排序，二分查找，分治算法等；\n（3）将用栈解决的问题变成用递归，使代码简洁。\n2.注意事项 　（1）每次执行一个方法时，就创建一个新的受保护的独立空间(栈空间)；\n（2）归必须向退出递归的条件逼近，否则就是无限递归；\n（3）当一个方法执行完毕，或者遇到return，就会返回，遵守：谁调用，就将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕。\n3.走迷宫问题 　（1）示意图如下\n- （2）【递归】走迷宫，求最短路径\n4.八皇后问题 　（1）示意图如下\n- （2）【递归】八皇后问题（回溯算法）\n 排序算法 1.内部排序 　（1）特点：将需要处理的所有数据都加载到内部存储器中进行排序。\n（2）冒泡排序\n- 基本思想：对待排序序列从前向后，依次比较相邻元素的值，若发现不符合条件则交换，使值大/小的元素逐渐从前移向后部，就像水底下的气泡一样逐渐向上冒出。\n- 优化：在排序过程中设置一个标志flag，判断元素是否进行过交换，如果一趟比较下来没有进行过交换，就说明序列是有序的，减少时间。\n（3）选择排序\n- 基本思想：每次从未排序区间中选择出一个最小/大的数与未排序区间的第一个位置进行交换，重复上述过程。\n- （4）插入排序\n- 基本思想：把n个待排序的元素看成为一个有序表和一个无序表，开始时有序表中只包含一个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。\n- （5）希尔排序（插入改进版）\n- 基本思想：记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止；\n- - 【希尔排序】使用交换法\n- 【希尔排序】使用移动法\n（6）快速排序（冒泡改进版本）\n- 基本思想：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列；\n- - 【快速排序】代码部分\n（7）归并排序\n- 基本思想：采用分治策略\n- - 【归并排序】采用分治，代码实现\n（8）基数排序（桶排序扩展）\n- 基本思想：将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。\n- 是稳定性排序，即不改变元素的相对位置，需要借助二维数组，属于空间换时间\n- - 【基数排序】代码实现\n2.外部排序 　使用情况：数据量过大，需要借助外部存储\n3.常用排序复杂度对比 　 查找算法 1.线性查找：逐一对比 2.二分查找：前提数组有序 3.插值查找 　（1）mid 是自适应的，即根据需要查找的值和左右边界而确定mid（公式）\n- - 【插值查找】代码实现\n（2）适应情况：数据量大，值分布均匀\n4.黄金分割法（斐波拉契查找法） 　（1）黄金分割值：0.618\n- （2）mid是位于黄金分割点附近，即 mid=low+F(k-1)-1\n递归/非递归\n","id":0,"section":"blog","summary":"本文是通过观看尚硅谷的数据结构和算法视频的笔记，如有错误地方，欢迎指正。 代码部分使用的语言是C++ 稀疏数组 1. 使用情况： 当一个数组中的大部分元","tags":["数据结构和算法"],"title":"数据结构和算法笔记","uri":"https://sleepshow.github.io/2022/05/datastruct/","year":"2022"},{"content":"使用系统：windows10系统\n1.下载git  官网上有教程，跟着安装就行了。\n注意：一定要检查git是否在环境变量path中，如果不在就添加进去!\n2.下载hugo  1.选择一个存放地址，创建一个bin文件存放 hugo；\n2.创建一个site文件存放博客站点，将hugo.exe所在的文件地址添加到path环境用户变量中；\n3.检测是否安装成功：\n- 在命令提示符（建议以管理员身份运行）中，输入hugo help；\n- 出现信息，表示安装成功；\n3.创建本地网站  1.创建新站点\n- 在命令提示符内进入到 site 文件夹下(命令符：cd)；\n- 输入：hugo new site webname.com；\n- 最后会显示网站的本地访问地址；\n2.选择一个博客主题\n- 进入到 hugo官方网站，选择合适的主题；\n- 根据提示进行安装(使用git命令)\n- 打开git bash软件；\n- 进入到网站根目录下；\n- 根据主题描述输入安装命令；\n- 将下载主题文件夹下 exampleSite 中的config.yml的文件复制到网站根目录下（有时候后缀不一定是.yml）；\n3.创建博客文件\n- 在根目录下输入：hugo new posts/blog.md，会提示创建成功；\n- 可以用 markdown 或者 Visual Studio Code 软件编写内容；注意写的时候将draft变成false；\n- 然后进行预览，输入：hugo server -t 主题名 --buildDrafts；\n- 根据提示给的网站地址预览；\n- 这是实时刷新的，方便在写博客的时候随时查看效果；\n- 按ctrl+c结束；\n4.在github上创建仓库  1.2.- 填写的名字一定要与前面的名字一致，且是小写（图中是之前建过一次了）；\n3.5.将本地网站部署到 github 上  1.点击刚才建立的仓库；\n2.3.下图中 \u0026ndash;baseURL=\u0026quot;(地址)\u0026quot; \u0026ndash;theme=(主题名)；\n- 4.生成一个 public 文件；\n- 6.将 public 文件传到 github 仓库上，使别人能够远程进行访问  1.进入到 public 文件下；\n2.3.- 若出现异常，将长框里的命令复制输入，回车；\n- 再次输入：git add .；\n4.输入：git commit -m \u0026quot;(文字自定)\u0026quot;；\n- - 如出现框中的报错，输入框中的命令，\u0026quot; \u0026quot; 是你自己的信息，第一个是邮件名，第二个是下图文件名：\n- - 再次输入：git commit -m \u0026quot;(文字自定)\u0026quot;；\n5.出现下列信息表示成功\n- 7.进行关联  1.输入：git remote add origin 链接；\n2.这里的链接是：\n- - 注意大小写，不要忘记链接后面的 git ，如果输错了就删除远程git仓库；\n3.git remote rm origin（删除远程仓库），再进行关联；\n4.输入：git push -u origin master；\n- - 注意浏览器，它会弹出一个消息，点击绿色的选项进行即可；\n5.刷新git仓库，出现内容代表成功；\n- 8.查看是否可以远程访问，网站名就是仓库名；  1.如果出现404，进入仓库；\n-  - 2.如果上图框中是红色的叉：\n-  - - 点击红叉旁边的刷新按钮（图中是已经刷新过了的），等待；\n- 出现下列信息表示成功：\n-  以上是我创建博客的全过程，途中出现的异常是通过百度解决的，如有错误操作，欢迎指出。 ","id":1,"section":"blog","summary":"使用系统：windows10系统 1.下载git 官网上有教程，跟着安装就行了。 注意：一定要检查git是否在环境变量path中，如果不在就添加进","tags":["博客"],"title":"使用hugo在github上搭建博客","uri":"https://sleepshow.github.io/2022/05/createdhugo/","year":"2022"}],"tags":[{"title":"博客","uri":"https://sleepshow.github.io/tags/%E5%8D%9A%E5%AE%A2/"},{"title":"数据结构和算法","uri":"https://sleepshow.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"}]}